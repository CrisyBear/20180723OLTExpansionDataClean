#import numpy as np
import pandas as pd
import datetime
import os


# =============================================================================
# 函数功能：判断【完成目标网扩容】和【扩容施工进度】字段的信息是否准确，输出异常数据
# 处理逻辑：需同时满足【上联扩容完成情况】字段值为'完成目标网扩容'；【扩容施工进度】字段值为'10：已完成目标扩容'，否则为异常数据；
# 传入参数：原始数据的dataframe
# 返回结果：异常数据
# 未实现：当没有规划信息时，完成情况需要清零
# =============================================================================
def IsTargetNetworkCompleted(df0):
    df1 = df0[['OLT名称' , '上联扩容完成情况' , '扩容施工进度' , '上行扩容规划情况' , '规划扩容目标局向']]  #选取分析需要用到的字段
    df1['上联扩容完成情况_修改为'] = ''   # 这两列用于人工核对后记录准确的数据，以便系统后台修改
    df1['扩容施工进度_修改为'] = ''
    df1 = df1[['OLT名称' , '上联扩容完成情况' , '扩容施工进度' ,'上联扩容完成情况_修改为','扩容施工进度_修改为','上行扩容规划情况','规划扩容目标局向']] #调整顺序，方便Excel表人工核对操作
    df2 = df1[((df1['上联扩容完成情况'] == '完成目标网扩容') ^ (df1['扩容施工进度'] == '10：已完成目标扩容'))]  #判断逻辑：两个字段表达的内容不一致
    df_out = pd.merge(df2 , df0 , on='OLT名称', suffixes=('', '_y'))
    return  df_out

# =============================================================================
# 函数功能：当OLT“完成目标网扩容”时，判断归属网络域的信息是否已修改，输出异常数据
# 处理逻辑：当【上联扩容完成情况】字段值为'完成目标网扩容'时，【规划扩容目标局向】和【归属BNG】或者【归属SW】字段的值应该相同，否则为异常数据；
# 传入参数：原始数据的dataframe
# 返回结果：异常数据
# =============================================================================
def IsTargetNetworkCorrect(df0):
    df1 = df0[['OLT名称' , '上联扩容完成情况' , '上行扩容规划情况' , '规划扩容目标局向' , '归属BNG' , '归属BNG2' , '归属SW']]  #选取分析需要用到的字段
    df2 = df1[df1['上联扩容完成情况'] == '完成目标网扩容']  
    a = df2['规划扩容目标局向'] != df2['归属BNG']
    b = df2['规划扩容目标局向'] != df2['归属SW']
    df3 = df2[a & b]    
    df_out = pd.merge(df3 , df0 , on='OLT名称', suffixes=('', '_y'))
    return df_out

# =============================================================================
# 函数功能：当OLT“完成目标网扩容”或临时扩容后，判断【(历史)上联口峰值流量(M)】和【(历史)峰值带宽利用率(%)】字段是否重置，输出异常数据
# 处理逻辑：通过峰值流量和峰值利用率，计算上联端口的带宽级别，如果历史峰值和最近峰值所得出的级别不一致，则为异常数据；
# 传入参数：原始数据的dataframe
# 返回结果：异常数据
# =============================================================================
def IsHistoricalPeakReset(df0):
    df1 = df0[['OLT名称' ,'(历史)上联口峰值流量(M)', '(历史)峰值带宽利用率(%)',
                '(最近)上联口峰值流量(M)','(最近)峰值带宽利用率(%)',
                '上行扩容规划情况', '上联扩容完成情况','规划扩容目标局向','网络域类型']]#选取分析需要用到的字段
    bins = [  0  ,  700 ,  1300  ,  8000 , 12000 , 22000]    #通过流量和利用率数据计算得出的端口带宽，将其归类为具体的级别
    labels=['异常1GE','1GE','异常1-10GE','10GE','异常10GE']
    df1['OLT上行带宽计算_历史'] = df1['(历史)上联口峰值流量(M)'] / df1['(历史)峰值带宽利用率(%)'] * 100
    df1['OLT上行带宽计算_最近'] = df1['(最近)上联口峰值流量(M)'] / df1['(最近)峰值带宽利用率(%)'] * 100
    df1['OLT上行带宽级别_历史'] = pd.cut(df1['OLT上行带宽计算_历史'], bins = bins, labels = labels)
    df1['OLT上行带宽级别_最近'] = pd.cut(df1['OLT上行带宽计算_最近'], bins = bins, labels = labels)
    df1['处理意见'] = ''
    df1 = df1[['OLT名称' , '(历史)上联口峰值流量(M)' , '(历史)峰值带宽利用率(%)' , '(最近)上联口峰值流量(M)' , '(最近)峰值带宽利用率(%)' ,
               'OLT上行带宽计算_历史' , 'OLT上行带宽计算_最近' , 'OLT上行带宽级别_历史' , 'OLT上行带宽级别_最近' ,
               '处理意见' , '上行扩容规划情况' , '上联扩容完成情况' , '规划扩容目标局向' , '网络域类型']]  #重新排列字段顺序，方便Excel表的人工处理
    df2 = df1[df1['OLT上行带宽级别_历史'] != df1['OLT上行带宽级别_最近']]  #判断逻辑：两个字段表达的内容不一致
    df_out = pd.merge(df2 , df0 , on='OLT名称' , suffixes=('', '_y'))
    return df_out

# =============================================================================
# 函数功能：将（最近）峰值流量和利用率为0或缺失数据的OLT导出
# 处理逻辑：字段【(最近)上联口峰值流量(M)】为0，则为异常数据
# 传入参数：原始数据的dataframe
# 返回结果：异常数据
# =============================================================================
def IsRecentPeakZero(df0):

    return df_out

# =============================================================================
# 函数功能：梳理C16及以前完成扩容情况的信息
# 处理逻辑：
# 传入参数：原始数据的dataframe
# 返回结果：异常数据
# 进度：1.规划为--的，手动去掉；1.规划局向与归属网络域，待其他函数统一刷新；有两个是空，手动添加，其他不用管；2.流程为空，其他函数完成，不用管；3.佛山南海劳边节点-OLT001-AL-7360ISAM/E，只有1个10GE端口
# =============================================================================
def ShowC15C16(df0):
    df1 = df0[['OLT名称' , '(历史)上联口峰值流量(M)', '(历史)峰值带宽利用率(%)',
                '(最近)上联口峰值流量(M)','(最近)峰值带宽利用率(%)','上联扩容完成情况' , '上行扩容规划情况' , '规划扩容目标局向' , '原上联' , '网络域类型',
               '下接盒式OLT' , '归属框式OLT' , '归属BNG' , '归属BNG2' , '归属SW' ,
               '城域网端口1' , '端口速率(Mb/s)1' , '下行峰值利用率1' ,
               '城域网端口2' , '端口速率(Mb/s)2' , '下行峰值利用率2' ,
               '城域网端口3' , '端口速率(Mb/s)3' , '下行峰值利用率3' ,
               '城域网端口4' , '端口速率(Mb/s)4' , '下行峰值利用率4' ,
               '城域网端口5' , '端口速率(Mb/s)5' , '下行峰值利用率5' ,
               '城域网端口6' , '端口速率(Mb/s)6' , '下行峰值利用率6' ]]
    df1['上行扩容规划情况'].fillna('缺失数据', inplace = True)   #需要用到这个字段的值做判断，需要先填充空值，否则应用函数时会出错
    bins = [  0  ,  700 ,  1300  ,  8000 , 12000 , 22000]    #通过流量和利用率数据计算得出的端口带宽，将其归类为具体的级别
    labels=['异常1GE','1GE','异常1-10GE','10GE','异常10GE']
    df1['OLT上行带宽计算_历史'] = df1['(历史)上联口峰值流量(M)'] / df1['(历史)峰值带宽利用率(%)'] * 100
    df1['OLT上行带宽计算_最近'] = df1['(最近)上联口峰值流量(M)'] / df1['(最近)峰值带宽利用率(%)'] * 100
    df1['OLT上行带宽级别_历史'] = pd.cut(df1['OLT上行带宽计算_历史'], bins = bins, labels = labels)
    df1['OLT上行带宽级别_最近'] = pd.cut(df1['OLT上行带宽计算_最近'], bins = bins, labels = labels)
    a = df1['上行扩容规划情况'].str.contains('C16') | df1['上行扩容规划情况'].str.contains('C15')
    b = df1['上行扩容规划情况'].str.contains('--') & df1['上联扩容完成情况'].str.contains('完成目标网扩容')
    df_out = df1[a | b]
#    df_out = df2[(df2['规划扩容目标局向'] != df2['归属BNG']) & (df2['规划扩容目标局向'] != df2['归属SW'])]
    return df_out

# =============================================================================
# 函数功能：判断OLT级联的场景下，【下接盒式OLT】和【归属框式OLT】字段是否准确
# 处理逻辑：
# 传入参数：原始数据的dataframe
# 返回结果：异常数据
# =============================================================================
def IsHeshiOltJilianCorrect(df0):
    df1 = df0[['OLT名称' , '上联扩容完成情况' , '上行扩容规划情况' , '规划扩容目标局向' , '原上联' , '网络域类型',
               '下接盒式OLT' , '归属框式OLT' , '归属BNG' , '归属BNG2' , '归属SW' ,
               '城域网端口1' , '端口速率(Mb/s)1' , '下行峰值利用率1' ,
               '城域网端口2' , '端口速率(Mb/s)2' , '下行峰值利用率2' ,
               '城域网端口3' , '端口速率(Mb/s)3' , '下行峰值利用率3' ,
               '城域网端口4' , '端口速率(Mb/s)4' , '下行峰值利用率4' ,
               '城域网端口5' , '端口速率(Mb/s)5' , '下行峰值利用率5' ,
               '城域网端口6' , '端口速率(Mb/s)6' , '下行峰值利用率6' ]]
    df1['下接盒式OLT'].fillna('缺失数据', inplace = True)
    df1['归属框式OLT'].fillna('缺失数据', inplace = True)
    df2 = df1[(df1['下接盒式OLT'] != '缺失数据')][['OLT名称','下接盒式OLT']]  #去除不必要的字段，增加结果的可读性
    df3 = df1[(df1['归属框式OLT'] != '缺失数据')][['OLT名称','归属框式OLT']]
    df_out = pd.merge(df2,df3,how = 'outer',left_on='OLT名称',right_on='归属框式OLT')
    return df_out



# =============================================================================
# 函数功能：导出需要新增扩容规划的OLT清单
# 处理逻辑：
# 传入参数：原始数据的dataframe
# 返回结果：异常数据
# =============================================================================
def newxuqiu(df0):
    ##从原始数据筛选相关字段
    df_ghxq1 = df0[['OLT名称', '状态', '式样', '设备型号',
               '(历史)上联口峰值流量(M)', '(最近)上联口峰值流量(M)',
              '(历史)峰值带宽利用率(%)', '(最近)峰值带宽利用率(%)',
              '上行扩容规划情况', '规划扩容目标局向', '原上联',
              '上联扩容完成情况','完成目标网扩容时间', '扩容施工进度']]  #这里默认所选的列数据都是准确的，异常数据另行处理
    
    ##根据历史带宽利用率和上行规划情况筛选：
    ###①历史带宽利用率≥30%, 且未有规划
    df_ghxq2 = df_ghxq1[(df_ghxq1['(历史)峰值带宽利用率(%)'] >= 30) & (df_ghxq1['上行扩容规划情况'] == '--')]
    
    ###计算OLT上行带宽级别，辅助分析
    df_ghxq2['OLT上行带宽计算'] = df_ghxq2['(历史)上联口峰值流量(M)'] / df_ghxq2['(历史)峰值带宽利用率(%)'] *100
    df_ghxq2['OLT上行带宽级别'] = pd.cut(df_ghxq2['OLT上行带宽计算'], bins = bins, labels = labels)
    
    ##②针对盒式OLT，虽然已有规划2GE扩容，但是仍然需要提升至扩容10GE
    # 保存数据到Excel
    df_ghxq2.to_excel('OLT扩容异常数据4规划需求%s.xls' % datetime.datetime.now().strftime("%y-%m-%d-%H-%M"),sheet_name='未有规划异常数据',index = 0)
    return df_out




###############################################################################
####################################主程序#####################################
###############################################################################
# 设定工作目录
os.chdir("D:/学习/Python/MyCodes/20180723OLT扩容数据清洗/")   
# 读取原始数据
df = pd.read_excel('OLT基础信息20180726.xls', engine = 'xlrd',
                    sheet_name='OLT基础信息', skiprows=[0,1], usecols="B:DY")  #表格顶部两行是表头，A列是空列，都不读取

#data1 = IsTargetNetworkCompleted(df)
#data1.to_excel('异常数据-是否完成目标网扩容%s.xls' % datetime.datetime.now().strftime("%y-%m-%d-%H-%M"), sheet_name='完成目标网扩容异常数据',index = 0)
#
#data2 = IsTargetNetworkCorrect(df)
#data2.to_excel('异常数据-扩容后归属网络域情况%s.xls' % datetime.datetime.now().strftime("%y-%m-%d-%H-%M"), sheet_name='扩容后归属网络域异常数据',index = 0)
#
#data3 = IsHistoricalPeakReset(df)
#data3.to_excel('异常数据-扩容后历史峰值重置情况%s.xls' % datetime.datetime.now().strftime("%y-%m-%d-%H-%M"),sheet_name='扩容后峰值流量和利用率异常数据',index = 0)

data4 = ShowC15C16(df)
data4.to_excel('异常数据-C16及以前扩容数据清理%s.xls' % datetime.datetime.now().strftime("%y-%m-%d-%H-%M"),sheet_name='C16及以前扩容数据',index = 0)

#data5 = IsHeshiOltJilianCorrect(df)
#data5.to_excel('异常数据-网络域%s.xls' % datetime.datetime.now().strftime("%y-%m-%d-%H-%M"),sheet_name='盒式OLT级联异常数据',index = 0)

print('finish!')


# 未实现的想法：
# 1.在输出的sheet中，在最下面一行添加说明
# 2.根据端口1到6提取出来的名称，看看归属BNG信息是否正确
# 3.利用率数据是否异常，或者没有监控到
# 4.待功能成熟后，将不同功能改造为对应的函数
# 5.将数据结果改造成函数
# 6.如果输出数据为空，则不输出
# 7.如何方便地调整字段的排序
# 8.原上联也要进行标准化，只要是有规划信息的，但是需要在归属网络域信息正确的前提下










