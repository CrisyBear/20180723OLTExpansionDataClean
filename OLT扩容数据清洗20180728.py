# =============================================================================
# 模块功能：
# 处理逻辑：
# 作者：何家雄
# 版本信息：1.0（2018/7/？）
# 待优化的问题：
# 1.在输出的sheet中，在最下面一行添加说明
# 2.根据端口1到6提取出来的名称，看看归属BNG信息是否正确
# 3.利用率数据是否异常，或者没有监控到
# 4.原上联也要进行标准化，只要是有规划信息的，但是需要在归属网络域信息正确的前提下
# 5.梳理临时扩容的情况
# 用pycharm和spyder来互相同步
# =============================================================================

#import numpy as np
import pandas as pd
import datetime
import os


# =============================================================================
# 函数功能：判断【完成目标网扩容】和【扩容施工进度】字段的信息是否准确，输出异常数据
# 处理逻辑：需同时满足【上联扩容完成情况】字段值为'完成目标网扩容'；【扩容施工进度】字段值为'10：已完成目标扩容'，否则为异常数据；
# 传入参数：原始数据的dataframe
# 返回结果：异常数据
# 未实现：当没有规划信息时，完成情况需要清零
# =============================================================================
def IsTargetNetworkCompleted(df0):
    df1 = df0[['OLT名称', '上联扩容完成情况', '扩容施工进度', '上行扩容规划情况',
               '规划扩容目标局向']]  #选取分析需要用到的字段
    df1.insert(
        loc=3, column='上联扩容完成情况_修改为', value=None,
        allow_duplicates=True)  #插入两列，用于Excel表人工核对后填写正确的值
    df1.insert(loc=4, column='扩容施工进度_修改为', value=None, allow_duplicates=True)
    df2 = df1[((df1['上联扩容完成情况'] == '完成目标网扩容') ^
               (df1['扩容施工进度'] == '10：已完成目标扩容'))]  #判断逻辑：两个字段表达的内容不一致
    df_error = pd.merge(df2, df0, on='OLT名称', suffixes=('', '_y'))
    df_error.insert(
        loc=0, column='处理意见', value=None,
        allow_duplicates=True)  #用于人工核对时，备注相关情况
    return df_error


# =============================================================================
# 函数功能：当OLT“完成目标网扩容”时，判断归属网络域的信息是否已修改，输出异常数据
# 处理逻辑：当【上联扩容完成情况】字段值为'完成目标网扩容'时，【规划扩容目标局向】和【归属BNG】或者【归属SW】字段的值应该相同，否则为异常数据；
# 传入参数：原始数据的dataframe
# 返回结果：异常数据
# =============================================================================
def IsTargetNetworkCorrect(df0):
    df1 = df0[[
        'OLT名称', '上联扩容完成情况', '上行扩容规划情况', '规划扩容目标局向', '归属BNG', '归属BNG2', '归属SW'
    ]]  #选取分析需要用到的字段
    df2 = df1[df1['上联扩容完成情况'] == '完成目标网扩容']
    a = df2['规划扩容目标局向'] != df2['归属BNG']
    b = df2['规划扩容目标局向'] != df2['归属SW']
    df3 = df2[a & b]
    df_out = pd.merge(df3, df0, on='OLT名称', suffixes=('', '_y'))
    return df_out


# =============================================================================
# 函数功能：当OLT“完成目标网扩容”或临时扩容后，判断【(历史)上联口峰值流量(M)】和【(历史)峰值带宽利用率(%)】字段是否重置，输出异常数据
# 处理逻辑：通过峰值流量和峰值利用率，计算上联端口的带宽级别，如果历史峰值和最近峰值所得出的级别不一致，则为异常数据；
# 传入参数：原始数据的dataframe
# 返回结果：异常数据
# =============================================================================
def IsHistoricalPeakReset(df0):
    df1 = df0[[
        'OLT名称', '(历史)上联口峰值流量(M)', '(历史)峰值带宽利用率(%)', '(最近)上联口峰值流量(M)',
        '(最近)峰值带宽利用率(%)', '上行扩容规划情况', '上联扩容完成情况', '规划扩容目标局向', '网络域类型'
    ]]  #选取分析需要用到的字段

    #    df1['OLT上行带宽计算_历史'] = df1['(历史)上联口峰值流量(M)'] / df1['(历史)峰值带宽利用率(%)'] * 100
    df1.insert(
        loc=1,
        column='OLT上行带宽计算_历史',
        value=df1['(历史)上联口峰值流量(M)'] / df1['(历史)峰值带宽利用率(%)'] * 100,
        allow_duplicates=False)
    df1.insert(
        loc=2,
        column='OLT上行带宽计算_最近',
        value=df1['(最近)上联口峰值流量(M)'] / df1['(最近)峰值带宽利用率(%)'] * 100,
        allow_duplicates=False)

    bins = [0, 700, 1300, 8000, 12000, 22000]  #通过流量和利用率数据计算得出的端口带宽，将其归类为具体的级别
    labels = ['异常1GE', '1GE', '异常1-10GE', '10GE', '异常10GE']
    df1.insert(
        loc=3,
        column='OLT上行带宽级别_历史',
        value=pd.cut(df1['OLT上行带宽计算_历史'], bins=bins, labels=labels),
        allow_duplicates=False)
    df1.insert(
        loc=4,
        column='OLT上行带宽级别_最近',
        value=pd.cut(df1['OLT上行带宽计算_最近'], bins=bins, labels=labels),
        allow_duplicates=False)

    df2 = df1[df1['OLT上行带宽级别_历史'] != df1['OLT上行带宽级别_最近']]  #判断逻辑：两个字段表达的内容不一致
    df_error = pd.merge(df2, df0, on='OLT名称', suffixes=('', '_y'))
    df_error.insert(
        loc=0, column='处理意见', value=None,
        allow_duplicates=True)  #用于人工核对时，备注相关情况
    return df_error


# =============================================================================
# 函数功能：将（最近）峰值流量和利用率为0或缺失数据的OLT导出
# 处理逻辑：字段【(最近)上联口峰值流量(M)】为0，则为异常数据
# 传入参数：原始数据的dataframe
# 返回结果：异常数据
# =============================================================================
def IsRecentPeakZero(df0):

    df_error
    return df_error


# =============================================================================
# 函数功能：梳理C16及以前完成扩容情况的信息
# 处理逻辑：
# 传入参数：原始数据的dataframe
# 返回结果：异常数据
# 进度：1.规划局向与归属网络域，待其他函数统一刷新；有两个是空，手动添加，其他不用管；2.流程为空，其他函数完成，不用管；3.佛山南海劳边节点-OLT001-AL-7360ISAM/E，只有1个10GE端口
# =============================================================================
def ShowC15C16(df0):
    df1 = DataCleanNA(df0, '上行扩容规划情况')  #需要用到这个字段的值做判断，需要先填充空值，否则应用函数时会出错
    df2 = df1[[
        'OLT名称', '(历史)上联口峰值流量(M)', '(历史)峰值带宽利用率(%)', '(最近)上联口峰值流量(M)',
        '(最近)峰值带宽利用率(%)', '上联扩容完成情况', '上行扩容规划情况', '规划扩容目标局向', '原上联', '网络域类型',
        '下接盒式OLT', '归属框式OLT', '归属BNG', '归属BNG2', '归属SW', '城域网端口1',
        '端口速率(Mb/s)1', '下行峰值利用率1', '城域网端口2', '端口速率(Mb/s)2', '下行峰值利用率2',
        '城域网端口3', '端口速率(Mb/s)3', '下行峰值利用率3', '城域网端口4', '端口速率(Mb/s)4',
        '下行峰值利用率4', '城域网端口5', '端口速率(Mb/s)5', '下行峰值利用率5', '城域网端口6',
        '端口速率(Mb/s)6', '下行峰值利用率6'
    ]]

    df2.insert(
        loc=1,
        column='OLT上行带宽计算_历史',
        value=df2['(历史)上联口峰值流量(M)'] / df2['(历史)峰值带宽利用率(%)'] * 100,
        allow_duplicates=False)
    df2.insert(
        loc=2,
        column='OLT上行带宽计算_最近',
        value=df2['(最近)上联口峰值流量(M)'] / df2['(最近)峰值带宽利用率(%)'] * 100,
        allow_duplicates=False)

    bins = [0, 700, 1300, 8000, 12000, 22000]  #通过流量和利用率数据计算得出的端口带宽，将其归类为具体的级别
    labels = ['异常1GE', '1GE', '异常1-10GE', '10GE', '异常10GE']
    df2.insert(
        loc=3,
        column='OLT上行带宽级别_历史',
        value=pd.cut(df2['OLT上行带宽计算_历史'], bins=bins, labels=labels),
        allow_duplicates=False)
    df2.insert(
        loc=4,
        column='OLT上行带宽级别_最近',
        value=pd.cut(df2['OLT上行带宽计算_最近'], bins=bins, labels=labels),
        allow_duplicates=False)

    a = df2['上行扩容规划情况'].str.contains('C16') | df2['上行扩容规划情况'].str.contains(
        'C15')
    b = df2['上行扩容规划情况'].str.contains('--') & df2['上联扩容完成情况'].str.contains(
        '完成目标网扩容')
    df_out = df2[a | b]
    #    df_out = df2[(df2['规划扩容目标局向'] != df2['归属BNG']) & (df2['规划扩容目标局向'] != df2['归属SW'])]
    return df_out


# =============================================================================
# 函数功能：梳理完成临时扩容的信息
# 处理逻辑：
# 传入参数：原始数据的dataframe
# 返回结果：
# 进度：
# =============================================================================
def ShowC17C18linshikuorong(df0):
    df1 = df0[[
        'OLT名称', '状态', '式样', '设备型号', '上行扩容规划情况', '规划扩容目标局向', '原上联', '上联扩容完成情况',
        '完成目标网扩容时间', '扩容施工进度', '归属BNG', '归属SW', '城域网端口1', '端口速率(Mb/s)1',
        '下行峰值利用率1', '备注(上联扩容)', '城域网端口2', '端口速率(Mb/s)2', '下行峰值利用率2', '城域网端口3',
        '端口速率(Mb/s)3', '下行峰值利用率3', '城域网端口4', '端口速率(Mb/s)4', '下行峰值利用率4',
        '城域网端口5', '端口速率(Mb/s)5', '下行峰值利用率5', '城域网端口6', '端口速率(Mb/s)6',
        '下行峰值利用率6'
    ]]
    df2 = df1[df1['上行扩容规划情况'].str.contains('C17')
              | df1['上行扩容规划情况'].str.contains('C18')]
    df3 = df2[df2['上联扩容完成情况'] == '完成临时扩容']
    #df4记录为临时扩容但是规划局向与现网局向一致
    df4 = df3[(df3['规划扩容目标局向'] == df3['归属BNG'])
              | (df3['规划扩容目标局向'] == df3['归属SW'])]
    #df5 与df4相反
    df5 = df3[(df3['规划扩容目标局向'] != df3['归属BNG'])
              & (df3['规划扩容目标局向'] != df3['归属SW'])]
    return df4, df5


# =============================================================================
# 函数功能：判断OLT级联的场景下，【下接盒式OLT】和【归属框式OLT】字段是否准确
# 处理逻辑：
# 传入参数：原始数据的dataframe
# 返回结果：异常数据
# 备注：目前输出的是全量数据，不是异常数据，还需要再修改一下
# =============================================================================
def IsHeshiOltJilianCorrect(df0):
    df1 = DataCleanNA(df0, '下接盒式OLT',
                      '归属框式OLT')  # 需要做数值运算的列如果有空值，需要先清洗，否则编译会出问题
    df2 = df1[['OLT名称', '下接盒式OLT', '归属框式OLT']]
    #    df1['下接盒式OLT'].fillna('缺失数据', inplace = True)

    df3 = df2[(df2['下接盒式OLT'] != '缺失数据')][['OLT名称',
                                           '下接盒式OLT']]  #去除不必要的字段，增加结果的可读性
    df4 = df2[(df2['归属框式OLT'] != '缺失数据')][['OLT名称', '归属框式OLT']]
    df_out = pd.merge(
        df3, df4, how='outer', left_on='OLT名称', right_on='归属框式OLT')
    return df_out


# =============================================================================
# 函数功能：导出需要新增扩容规划的OLT清单
# 处理逻辑：
# 传入参数：原始数据的dataframe
# 返回结果：异常数据
# =============================================================================
def newxuqiu(df0):
    ##从原始数据筛选相关字段
    df_ghxq1 = df0[[
        'OLT名称', '状态', '式样', '设备型号', '(历史)上联口峰值流量(M)', '(最近)上联口峰值流量(M)',
        '(历史)峰值带宽利用率(%)', '(最近)峰值带宽利用率(%)', '上行扩容规划情况', '规划扩容目标局向', '原上联',
        '上联扩容完成情况', '完成目标网扩容时间', '扩容施工进度'
    ]]  #这里默认所选的列数据都是准确的，异常数据另行处理

    ##根据历史带宽利用率和上行规划情况筛选：
    ###①历史带宽利用率≥30%, 且未有规划
    df_ghxq2 = df_ghxq1[(df_ghxq1['(历史)峰值带宽利用率(%)'] >= 30)
                        & (df_ghxq1['上行扩容规划情况'] == '--')]

    ###计算OLT上行带宽级别，辅助分析
    df_ghxq2[
        'OLT上行带宽计算'] = df_ghxq2['(历史)上联口峰值流量(M)'] / df_ghxq2['(历史)峰值带宽利用率(%)'] * 100
    df_ghxq2['OLT上行带宽级别'] = pd.cut(
        df_ghxq2['OLT上行带宽计算'], bins=bins, labels=labels)

    ##②针对盒式OLT，虽然已有规划2GE扩容，但是仍然需要提升至扩容10GE
    # 保存数据到Excel
    df_ghxq2.to_excel(
        'OLT扩容异常数据4规划需求%s.xls' %
        datetime.datetime.now().strftime("%y-%m-%d-%H-%M"),
        sheet_name='未有规划异常数据',
        index=0)
    return df_ghxq2


# =============================================================================
# 函数功能：将DataFrame中的某些列的空值填充为“缺失数据”
# 处理逻辑：
# 传入参数：数据DataFrame，需要清理空值的列
# 返回结果：清理后的数据DataFrame
# =============================================================================
def DataCleanNA(df0, *cols):
    for col in cols:
        df0[col].fillna('缺失数据', inplace=True)
    return df0


# =============================================================================
# 函数功能：将数据导出为Excel文件
# 处理逻辑：
# 传入参数：需要导出的数据dataframe，文件名
# 返回结果：无。函数内部打印导出结果提示
# =============================================================================
def DataToExcel(data, filename):
    if sum(data.index):  # 如果数据不为空
        data.to_excel(
            '%s%s' % (datetime.datetime.now().strftime("%y-%m-%d-%H-%M"),
                      filename),
            sheet_name=filename,
            index=0)
        print('【完成】数据导出成功：%s' % filename)
    else:
        print('【无异常】数据无导出，无该类型异常数据：%s' % filename)
    return


###############################################################################
####################################主程序#####################################
###############################################################################

# 设定工作目录
os.chdir("D:/学习/Python/MyCodes/20180723OLT扩容数据清洗/")

# 读取原始数据
df = pd.read_excel(
    'OLT基础信息20180727.xls',
    engine='xlrd',
    sheet_name='OLT基础信息',
    skiprows=[0, 1],
    usecols="B:DY")  #表格顶部两行是表头，A列是空列，都不读取

data1 = IsTargetNetworkCompleted(df)
DataToExcel(data1 , '异常数据-完成目标网扩容记录异常.xls')

#data2 = IsTargetNetworkCorrect(df)
#DataToExcel(data2 , '异常数据-扩容后归属网络域异常.xls')
#
#data3 = IsHistoricalPeakReset(df)
#DataToExcel(data3 , '异常数据-扩容后历史峰值数据异常.xls')
#
#data4 = ShowC15C16(df)
#DataToExcel(data4 , 'C16及以前扩容数据清理.xls')
#
#data5 = IsHeshiOltJilianCorrect(df)
#DataToExcel(data5 , '异常数据-盒式OLT级联信息异常.xls')

print('Finish!')
